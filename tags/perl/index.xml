<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>perl on Blog of retrhelo</title><link>https://retrhelo.github.io/tags/perl/</link><description>Recent content in perl on Blog of retrhelo</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Tue, 23 Aug 2022 08:51:00 +0800</lastBuildDate><atom:link href="https://retrhelo.github.io/tags/perl/index.xml" rel="self" type="application/rss+xml"/><item><title>Better subroutine caller tracking with Perl</title><link>https://retrhelo.github.io/posts/perl/caller/</link><pubDate>Tue, 23 Aug 2022 08:51:00 +0800</pubDate><guid>https://retrhelo.github.io/posts/perl/caller/</guid><description>&lt;p>In this article, I note down a very useful approach in Perl, to better track and
locate the caller of certain subroutine.&lt;/p></description></item><item><title>Develop a Perl module: Create and Test</title><link>https://retrhelo.github.io/posts/perl/module_create_and_test/</link><pubDate>Sat, 06 Aug 2022 15:35:35 +0800</pubDate><guid>https://retrhelo.github.io/posts/perl/module_create_and_test/</guid><description>&lt;p>Perl module is a common approach for providing custom sets of functions. But how
exactly a module is created, developed, and maintained? In this article, I write
down my experience of developing a tiny module named &lt;code>Camellia::Glue&lt;/code>.&lt;/p></description></item><item><title>Use local modules in Perl5</title><link>https://retrhelo.github.io/posts/perl/local_lib/</link><pubDate>Thu, 30 Jun 2022 12:03:24 +0800</pubDate><guid>https://retrhelo.github.io/posts/perl/local_lib/</guid><description>&lt;p>In this article, I explain how to write Perl scripts with multiple files.&lt;/p></description></item></channel></rss>